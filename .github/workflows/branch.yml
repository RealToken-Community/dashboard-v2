name: Test and deploy to branch

on:
  push:
    branches:
      - master
      - preprod
      - develop

jobs:
  validate:
    name: Validate branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Prettier
        run: npm run prettier:check

      - name: Build
        run: npm run build

  deploy:
    name: Deploy to branch
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/dashboard:${{ github.ref_name }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            Port $SSH_PORT
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}

      - name: Update branch environment
        env:
          DOCKER_BRANCH: ${{ github.ref_name }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
          DOMAIN_URL: ${{ secrets.DOMAIN_URL }}
          THEGRAPH_API_KEY: ${{ secrets.THEGRAPH_API_KEY }}
          COMMUNITY_API_KEY: ${{ secrets.COMMUNITY_API_KEY }}
          RPC_URLS_ETH_MAINNET: ${{ secrets.RPC_URLS_ETH_MAINNET }}
          RPC_URLS_GNOSIS_MAINNET: ${{ secrets.RPC_URLS_GNOSIS_MAINNET }}
          MATOMO_ID_PROD: ${{ secrets.MATOMO_ID_PROD }}
          MATOMO_ID_PREPROD: ${{ secrets.MATOMO_ID_PREPROD }}
          MATOMO_ID_DEVELOP: ${{ secrets.MATOMO_ID_DEVELOP }}
        run: |
          if [[ "$DOCKER_BRANCH" == "master" ]]; then
            export MATOMO_SITE_ID="$MATOMO_ID_PROD"
            export HOSTNAME="dashboard.$DOMAIN_URL"
          elif [[ "$DOCKER_BRANCH" == "preprod" ]]; then
            export MATOMO_SITE_ID="$MATOMO_ID_PREPROD"
            export HOSTNAME="dashboard.$DOCKER_BRANCH.$DOMAIN_URL"
          else
            export MATOMO_SITE_ID="$MATOMO_ID_DEVELOP"
            export HOSTNAME="dashboard.$DOCKER_BRANCH.$DOMAIN_URL"
          fi
      
          ssh staging <<EOF
            set -euxo pipefail
            export DOCKER_BRANCH="$DOCKER_BRANCH"
            export DOCKER_REGISTRY="$DOCKER_REGISTRY"
      
            cd /var/docker/dashboard-v2/\$DOCKER_BRANCH
            git pull origin \$DOCKER_BRANCH
            docker compose --file docker-compose-branch.yml pull
            docker login -u "$DOCKER_LOGIN" -p "$DOCKER_PASSWD" \$DOCKER_REGISTRY
      
            THEGRAPH_API_KEY="$THEGRAPH_API_KEY" \
            COMMUNITY_API_KEY="$COMMUNITY_API_KEY" \
            REALTOKENAPI="https://api.$DOMAIN_URL/v1/token" \
            REALTOKENAPI_HISTORY="https://history.api.$DOMAIN_URL/" \
            MATOMO_URL="https://data.$DOMAIN_URL/" \
            MATOMO_SITE_ID="$MATOMO_SITE_ID" \
            RPC_URLS_ETH_MAINNET="$RPC_URLS_ETH_MAINNET" \
            RPC_URLS_GNOSIS_MAINNET="$RPC_URLS_GNOSIS_MAINNET" \
            HOSTNAME="$HOSTNAME" \
            docker compose --project-name \$DOCKER_BRANCH-dashboard --file docker-compose-branch.yml up -d
          EOF
